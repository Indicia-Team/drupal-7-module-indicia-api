<?php

/**
 * @file
 * Iform Mobile Authentication Module's Core functionality.
 */

// Module configuration's URL path.
const CONFIG_PATH = 'admin/config/iform/api';

const API_BASE = 'api';
const API_VERSION = 'v0.1';

require API_VERSION . '/samples/POST.php';
require API_VERSION . '/users/POST.php';
require API_VERSION . '/users/auth/POST.php';
require API_VERSION . '/reports/GET.php';


/**
 * Implements hook_permission().
 */
function indicia_api_permission() {
  return array(
    'admin mobile auth' => array(
      'title' => t('View the administrative dashbord'),
      'description' => t('Allows to reach the administrative dashboard and so manage it.'),
    ),
    'user mobile auth' => array(
      'title' => t('View personal dashboard'),
      'description' => t('View personal Indicia API dashboard, to manage personal assigned information.'),
    ),
  );
}


/*
 * Submit the relevant information to indicia
 */
if (module_exists('iform')) {
  iform_load_helpers(array('data_entry_helper'));
}

/**
 * Implements hook_menu().
 */
function indicia_api_menu() {
  $items = array();

  $api_path = API_BASE . '/' . API_VERSION;

  $items["$api_path/samples"] = array(
    'title' => 'Samples POST',
    'page callback' => 'indicia_api_samples_post',
    'access callback' => TRUE,
  );

  $items["$api_path/users"] = array(
    'title' => 'Samples POST',
    'page callback' => 'indicia_api_users_post',
    'access callback' => TRUE,
  );

  $items["$api_path/users/auth"] = array(
    'title' => 'Samples POST',
    'page callback' => 'indicia_api_users_auth_post',
    'access callback' => TRUE,
  );

  $items["$api_path/reports"] = array(
    'title' => 'Reports GET/POST',
    'page callback' => 'indicia_api_reports_get_post',
    'access callback' => TRUE,
  );

  // User Interface options.
  // Dashboard.
  $items[CONFIG_PATH] = array(
    'title' => 'Indicia API',
    'description' => 'Configure variables relating to the mobile authorisation module',
    'page callback' => 'indicia_api_dashboard',
    'access arguments' => array('user mobile auth'),
    'file' => 'indicia_api.admin.inc',
  );
  // Add.
  $items[CONFIG_PATH . '/add'] = array(
    'title' => 'Indicia API',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('indicia_api_app'),
    'access arguments' => array('user mobile auth'),
    'file' => 'indicia_api.admin.inc',
    'type' => MENU_CALLBACK,
  );
  // Edit.
  $items[CONFIG_PATH . '/%indicia_api_app'] = array(
    'title' => 'App settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('indicia_api_app', 4),
    'access arguments' => array('user mobile auth'),
    'file' => 'indicia_api.admin.inc',
    'type' => MENU_CALLBACK,
  );
  // Delete.
  $items[CONFIG_PATH . '/delete/%indicia_api_app'] = array(
    'title' => 'Delete App',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('indicia_api_delete', 5),
    'access arguments' => array('user mobile auth'),
    'file' => 'indicia_api.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Checks if the user is allowed to see a saved app account.
 *
 * @param array $app
 *   An array containing details of an app account.
 *
 * @return bool
 *   TRUE if user has the 'admin moobile auth permission' or they created the
 *   app.
 */
function indicia_api_user_has_permission($app = NULL) {
  global $user;
  return user_access('admin mobile auth') || (!is_null($app) && $app['created_by'] === $user->uid);
}

/**
 * Implements hook_load().
 */
function indicia_api_app_load($id = NULL) {
  if ($id) {
    // Get specific app account.
    $results = db_query("SELECT * FROM {indicia_api}
      WHERE id = :id ORDER BY title", array(':id' => $id));
  }
  else {
    // All accounts.
    $results = db_query("SELECT * FROM {indicia_api} ORDER BY title");
  }

  // Transform an array of apps.
  $apps = array();
  foreach ($results as $app) {
    $apps[] = (array) $app;
  }

  return $apps;
}

/**
 * Checks if the mobile application password and name match any in the database.
 *
 * This function iterates through the list of app accounts from database table
 * with the matching name. This means it is allowed for one appname to have more
 * than one appsecret, and if any of the secrets match the provided secret than
 * the authorisation is given.
 */
function indicia_api_authorise_app() {
  $request = $_POST + $_GET;
  $secret = $request['appsecret'];
  $name = empty($request['appname']) ? '' : $request['appname'];
  if (empty($secret) || empty($name)) {
    return FALSE;
  }

  $result = db_query(
    "SELECT * FROM {indicia_api} WHERE name = :name",
    array(':name' => $name));
  foreach ($result as $app) {
    $current_secret = $app->secret;
    if ($secret === $current_secret) {
      return TRUE;
    }
  }

  return FALSE;
}


/**
 * Authorise a request to either submit or read records from an app.
 *
 * Uses the posted usersecret, appsecret and email to check that the app is
 * authorised and that the user is valid and activated.
 * @return object
 *   Drupal user object, or FALSE if not authorised.
 */
function indicia_api_authorise_user() {
  $request = $_POST + $_GET;
  // Pull out expected parameters from POST request.
  $usersecret = isset($request['usersecret']) ? $request['usersecret'] : '';
  $email = isset($request['email']) ? $request['email'] : '';

  if (empty($email) || empty($usersecret)) {
    return FALSE;
  }

  $existing_user = user_load_by_mail($email);

  // Check user secret.
  $user_wrapped = entity_metadata_wrapper('user', $existing_user);
  if ($usersecret != $user_wrapped->field_iform_auth_shared_secret->value()) {
    return FALSE;
  }

  // Assign this user to gobal user var so that it can be added to the indicia
  // submission.
  $GLOBALS['user'] = $existing_user;
  return $existing_user;
}

/**
 * A function to escape user input.
 *
 * Currently simply a wrapper around drupal's check_plain function.
 */
function indicia_api_escape($value) {
  if (is_array($value)) {
    $escaped_array = array();
    foreach ($value as $key => $nested_value) {
      $escaped_array[$key] = indicia_api_escape($nested_value);
    }
    return $escaped_array;
  }
  else {
    return check_plain($value);
  }
}

/**
 * A simple utility method to generate a random string of specific length.
 *
 * @param int $length
 *   The length of string required.
 *
 * @return string
 *   A random string.
 */
function indicia_api_generate_random_string($length = 10) {
  return substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, $length);
}


/**
 * Obtains an indicia user id from the warehouse.
 *
 * This calls the index.php/services/user_identifier/get_user_id service to
 * return an indicia id which can be associated with the user account.
 *
 * @param string $email
 *   The user's email.
 * @param string $firstname
 *   The user's first name.
 * @param string $secondname
 *   The user's surname.
 * @param int $cms_id
 *   The Drupal user id. Not needed when creating new users.
 *
 * @return int
 *   The indicia user id if successful else -1 or and error message.
 */
function indicia_api_get_user_id($email, $firstname, $secondname, $cms_id = NULL) {
  // Get connection/indicia website details.
  $connection = iform_get_connection_details(NULL);

  $postargs = array();
  $postargs['website_id'] = $connection['website_id'];

  // Obtain nonce.
  $curl_check = data_entry_helper::http_post(
    helper_config::$base_url . 'index.php/services/security/get_nonce',
    $postargs);

  if ($curl_check['result']) {
    $nonce = $curl_check['output'];

    $postargs = array();
    $postargs['identifiers'] = '[{"type":"email","identifier":"' . $email . '"}]';
    $postargs['auth_token'] = sha1($nonce . ":" . $connection['password']);
    $postargs['surname'] = $secondname;
    $postargs['first_name'] = $firstname;
    if (isset($cms_id)) {
      $postargs['cms_user_id'] = $cms_id;
    }
    $postargs['force'] = 'split';
    $postargs['nonce'] = $nonce;

    indicia_api_log(print_r($postargs, 1));

    // Request the user id.
    $get_id_results = data_entry_helper::http_post(
      helper_config::$base_url . 'index.php/services/user_identifier/get_user_id',
      $postargs,
      FALSE);
    indicia_api_log(print_r($get_id_results, 1));

    $result = json_decode($get_id_results['output']);
    if (!isset($result->error)) {
      return intval($result->userId);
    }
    else {
      indicia_api_log('Error in indicia_api_get_user_id:' . $result->error);
      return $result->error;
    }
  }
  else {
    indicia_api_log('indicia_api_get_user_id:Unable to retreive nonce');
  }

  return -1;
}


/**
 * Test if the supplied password is acceptable.
 *
 * Simple at the moment but could contain additional checks (alpha-numerics,
 * special chars etc)
 *
 * @param string $pass
 *   The proposed password.
 *
 * @return bool
 *   TRUE is password is acceptable, else FALSE
 */
function indicia_api_validate_password($pass) {
  return strlen($pass) >= 0;
}


/**
 * Tests to see if the app for which a POST has been received is in debug mode.
 *
 * @return bool
 *   TRUE if the app is in debug mode.
 */
function indicia_api_debug_mode() {
  if (empty($_POST['appname'])) {
    return FALSE;
  }

  $name = $_POST['appname'];

  $result = db_query("SELECT * FROM {indicia_api} WHERE name = :name",
    array(':name' => $name));

  foreach ($result as $app) {
    if ($app->debug == 1) {
      return TRUE;
    }
  }

  return FALSE;
}



/**
 * Logs messages if in debug mode.
 *
 * Messages go to the PHP error log and the Drupal error log.
 */
function indicia_api_log($message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL) {
  // Obtain debug mode indicator.
  $debug = indicia_api_debug_mode();
  if ($debug) {
    error_log($message);
    watchdog("iform_mobile_auth", $message, $variables, $severity, $link);
  }
}
